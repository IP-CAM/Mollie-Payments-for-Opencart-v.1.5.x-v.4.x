<?xml version="1.0" encoding="utf-8"?>
<modification>
    <name>Quality Works - Mollie</name>
    <code>mollie</code>
    <version>3.0.0</version>
    <author>Quality Works</author>
    
    <file path="catalog/controller/event/compatibility.php">
        <operation error="skip">
            <search position="replace"><![CDATA['model/' . $route . '.php']]></search>
            <add position="replace"><![CDATA['model/'.((strpos($route,'get') !== false) ? dirname($route) : $route).'.php']]></add>
        </operation>
    </file>
    <file path="admin/controller/event/compatibility.php">
        <operation error="skip">
            <search position="after"><![CDATA[if (!is_file(DIR_APPLICATION . 'controller/' . $route . '.php') && is_file(DIR_APPLICATION . 'controller/' . $part[1] . '/' . $part[2] . '.php')) {]]></search>
            <add position="after" offset="1"><![CDATA[if(array_key_exists(3, $part)) {
                $route = $part[1] . '/' . $part[2] . '/' . $part[3];
            }]]></add>
        </operation>
    </file>
    <file path="catalog/controller/api/order.php">
        <!-- Shipment creation for Klarna method for versions older than 2.2 -->
        <operation error="skip">
            <search position="after"><![CDATA[$this->model_checkout_order->addOrderHistory($order_id, $this->request->post['order_status_id']]]></search>
            <add position="after"><![CDATA[// Shipment creation for Klarna for versions older than 2.2
                if(VERSION < "2.2") {
                    $orderdata = array("0" => $order_id, "1" => $this->request->post['order_status_id']);
                    $route = null;
                    require(DIR_APPLICATION . "controller/payment/mollie/base.php");
                    $controller = new ControllerPaymentMollieBase($this->registry);
                    $controller->createShipment($route, $orderdata, "", "");
                } ]]></add>
        </operation>
    </file>
    <file path="admin/controller/sale/order.php">
        <!-- Showing mollie payment status on order info page -->
        <operation error="skip">
            <search position="before"><![CDATA[$this->response->setOutput($this->load->view('sale/order_info]]></search>
            <add position="before"><![CDATA[$data['payment_status'] = '';
            $data['paymentMethod'] = '';
            $molliePaymentDetails = $this->model_sale_order->getMolliePayment($this->request->get['order_id']);
            if(isset($molliePaymentDetails['transaction_id']) && !empty($molliePaymentDetails['transaction_id'])) {
                try {
                    $molliePayment = $this->getAPIClient($order_info['store_id'])->payments->get($molliePaymentDetails['transaction_id']);
                     $data['payment_status'] = $molliePayment->status;
                     $data['paymentMethod'] = $molliePayment->method;

                     // Check for refunds and settlements
                    if($molliePayment->hasRefunds()) {
                        $data['payment_status'] = 'refunded';
                    }

                    if(!empty($molliePayment->settlementId)) {
                        $mollieHelper = new MollieHelper($this->registry);
                        $accessToken = $mollieHelper->generateAccessToken($order_info['store_id']);
                        if($accessToken && !empty($accessToken)) {
                            $mollieSettlement = $mollieHelper->getAPIClientForAccessToken($accessToken)->settlements->get($molliePayment->settlementId);
                            if($mollieSettlement->isPaidout()) {
                                $data['payment_status'] = 'settled';
                            }
                        }
                    }
                } catch (Mollie\Api\Exceptions\ApiException $e) {
                    $log = new Log('Mollie.log');
                    $log->write(htmlspecialchars($e->getMessage()));
                }
            }

            $data['productlines'] = array();
            if ($molliePaymentDetails && !empty($molliePaymentDetails['mollie_order_id'])) {
                try {
                    $mollieOrder = $this->getAPIClient($order_info['store_id'])->orders->get($molliePaymentDetails['mollie_order_id'], ["embed" => "refunds"]);

                    $refundedLines = array();
                    if(!empty($mollieOrder->_embedded->refunds)) {
                        foreach ($mollieOrder->_embedded->refunds as $refund) {
                            foreach ($refund->lines as $refundedLine) {
                                $refundedLines[] = $refundedLine->id;
                            }                        
                        }
                    }

                    if ($mollieOrder->lines) {
                        foreach ($mollieOrder->lines as $orderline) {
                            if ($orderline->type == 'physical') {
                                foreach ($data['products'] as $_product) {
                                    if (($orderline->metadata) && ($orderline->metadata->order_product_id == $_product['order_product_id']) && !in_array($orderline->id, $refundedLines)) {
                                        $data['productlines'][] = array(
                                            "id" => $orderline->id,
                                            "name" => $_product['name'],
                                            "option" => $_product['option'],
                                            "quantity" => $orderline->quantity,
                                            "order_product_id" => $orderline->metadata->order_product_id
                                        );
                                    }
                                }
                            }
                        }
                    }
                } catch (Mollie\Api\Exceptions\ApiException $e) {
                    $log = new Log('Mollie.log');
                    $log->write(htmlspecialchars($e->getMessage()));
                }
            }
            ]]></add>
        </operation>
        <!-- Order refund button -->
        <operation error="skip">
            <search position="before"><![CDATA[class ControllerSaleOrder]]></search>
            <add position="before"><![CDATA[require_once(DIR_SYSTEM . "library/mollie/helper.php");]]></add>
        </operation>
        <operation error="skip">
            <search position="after"><![CDATA[$data['heading_title']]]></search>
            <add position="after"><![CDATA[$data['button_refund'] = $this->language->get('button_refund');
                $data['text_confirm_refund'] = $this->language->get('text_confirm_refund');
                $data['entry_amount'] = $this->language->get('entry_amount');
                $data['button_partial_refund'] = $this->language->get('button_partial_refund');
                $data['entry_partial_refund_type'] = $this->language->get('entry_partial_refund_type');
                $data['text_custom_amount'] = $this->language->get('text_custom_amount');
                $data['text_productline'] = $this->language->get('text_productline');
                $data['entry_productline'] = $this->language->get('entry_productline');
                $data['entry_quantity'] = $this->language->get('entry_quantity');
                $data['help_quantity'] = $this->language->get('help_quantity');
                ]]></add>
        </operation>
        <operation error="skip">
            <search position="after"><![CDATA[public function info() {]]></search>
            <add position="after"><![CDATA[
                if(version_compare(VERSION, '2.0', '<')) {
                    $this->data['isVersion15x'] = true;
                    $data['isVersion15x'] = true;
                }]]></add>
        </operation>
        <operation error="skip">
            <search position="before"><![CDATA[$data['store_name']]]></search>
            <add position="before"><![CDATA[
            $mollieHelper = new MollieHelper($this->registry);
            $moduleCode = $mollieHelper->getModuleCode();
            $apiKey = $mollieHelper->getApiKey($order_info['store_id']);

            $data['showRefundButton'] = true;
            $data['showPartialRefundButton'] = true;
            if(!$apiKey || ($apiKey == '')) {
                $data['showRefundButton'] = false;
                $data['showPartialRefundButton'] = false;
            }

            $refunds = $this->model_sale_order->getMollieRefunds($order_id);
            if ($refunds) {
                $data['showRefundButton'] = false;
            }

            if (!$this->config->get($moduleCode . '_partial_refund')) {
                $data['showPartialRefundButton'] = false;
            }

            $data['currency'] = $order_info['currency_code'];
            $data['store_id'] = $order_info['store_id'];
            $data['catalog'] = $this->request->server['HTTPS'] ? HTTPS_CATALOG : HTTP_CATALOG;
            ]]></add>
        </operation>
        <operation error="skip">
            <search position="before"><![CDATA[public function index()]]></search>
            <add position="before"><![CDATA[

    protected function getAPIClient($store)
    {
        $mollieHelper = new MollieHelper($this->registry);
        $data = $this->config;
        $data->set($mollieHelper->getModuleCode() . "_api_key", $mollieHelper->getApiKey($store));

        return $mollieHelper->getAPIClient($data);
    }

    public function numberFormat($amount, $currency) {
        $intCurrencies = array("ISK", "JPY");
        if(!in_array($currency, $intCurrencies)) {
            $formattedAmount = number_format((float)$amount, 2, '.', '');
        } else {
            $formattedAmount = number_format($amount, 0);
        }   
        return $formattedAmount;    
    }

    protected function convertCurrency($amount, $currency) {
        $this->load->model("localisation/currency");
        $currencies = $this->model_localisation_currency->getCurrencies();
        $convertedAmount = $amount * $currencies[$currency]['value'];

        return $convertedAmount;
    }

    public function refund() {
        $this->load->language('sale/order');

        $this->document->setTitle($this->language->get('heading_title'));

        $this->load->model('sale/order');

        $json = array();
        $json['error'] = false;

        $log = new Log('Mollie.log');
        $mollieHelper = new MollieHelper($this->registry);
        $moduleCode = $mollieHelper->getModuleCode();
        
        $order_id = $this->request->get['order_id'];
        $order = $this->model_sale_order->getOrder($order_id);

        $mollieOrderDetails = $this->model_sale_order->getMolliePayment($order_id);
        if(!$mollieOrderDetails) {
            $log->write("Mollie order(mollie_order_id) not found for order_id - $order_id");
            $json['error'] = $this->language->get('text_order_not_found');
        }

        if($mollieOrderDetails['refund_id']) {
            $log->write("Refund has been processed already for order_id - $order_id");
            $json['error'] = $this->language->get('text_refunded_already');
        }

        if(!$json['error']) {
            if (!empty($mollieOrderDetails['mollie_order_id'])) {
                $mollieOrder = $this->getAPIClient($order['store_id'])->orders->get($mollieOrderDetails['mollie_order_id']);
                if($mollieOrder->isPaid() || $mollieOrder->isShipping() || $mollieOrder->isCompleted()) {

                    $refundObject = $mollieOrder->refundAll([
                        "metadata" => array("order_id" => $order_id)
                    ]);

                    if($refundObject->id) {
                        $log->write("Refund has been processed for order_id - $order_id, mollie_order_id - " . $mollieOrderDetails['mollie_order_id'] . ". Refund id is $refundObject->id.");
                        $json['success'] = $this->language->get('text_refund_success');
                        $json['order_status_id'] = $this->config->get($moduleCode . "_ideal_refund_status_id");
                        $json['comment'] = $this->language->get('text_refund_success');

                        $this->model_sale_order->updateMolliePayment($mollieOrderDetails['mollie_order_id'], $refundObject->id, 'refunded');

                    } else {
                        $log->write("Refund process can not be processed for order_id - $order_id.");
                        $json['error'] = $this->language->get('text_no_refund');
                    }

                } else {
                    $log->write("Refund can not be processed for order_id - $order_id. Order lines that are Paid, Shipping or Completed can be refunded.");
                    $json['error'] = $this->language->get('text_no_refund');
                }
            } else {
                $molliePayment = $this->getAPIClient($order['store_id'])->payments->get($mollieOrderDetails['transaction_id']);
                if($molliePayment->isPaid()) {
                    $amount = $this->numberFormat($this->convertCurrency($order['total'], $order['currency_code']), $order['currency_code']);
                    $refundObject = $molliePayment->refund([
                        "amount" => ["currency" => $order['currency_code'], "value" => (string)$amount],
                        "metadata" => array("order_id" => $order_id, "transaction_id" => $mollieOrderDetails['transaction_id'])
                    ]);

                    if($refundObject->id) {
                        $log->write("Refund has been processed for order_id - $order_id, transaction_id - " . $mollieOrderDetails['transaction_id'] . ". Refund id is $refundObject->id.");
                        $json['success'] = $this->language->get('text_refund_success');
                        $json['order_status_id'] = $this->config->get($moduleCode . "_ideal_refund_status_id");
                        $json['comment'] = $this->language->get('text_refund_success');

                        $this->model_sale_order->updateMolliePaymentForPaymentAPI($mollieOrderDetails['transaction_id'], $refundObject->id, 'refunded');

                    } else {
                        $log->write("Refund process can not be processed for order_id - $order_id.");
                        $json['error'] = $this->language->get('text_no_refund');
                    }
                } else {
                    $log->write("Refund can not be processed for order_id - $order_id.");
                    $json['error'] = $this->language->get('text_no_refund');
                }
            }
        }

        $this->response->addHeader('Content-Type: application/json');
        $this->response->setOutput(json_encode($json));

    }

    public function partialRefund() {
        $this->load->language('sale/order');

        $this->document->setTitle($this->language->get('heading_title'));

        $this->load->model('sale/order');

        $json = array();
        $json['error'] = false;

        $log = new Log('Mollie.log');
        $mollieHelper = new MollieHelper($this->registry);
        $moduleCode = $mollieHelper->getModuleCode();
        
        $order_id = $this->request->get['order_id'];
        $order = $this->model_sale_order->getOrder($order_id);

        $mollieOrderDetails = $this->model_sale_order->getMolliePayment($order_id);
        if(!$mollieOrderDetails) {
            $log->write("Mollie order(mollie_order_id) not found for order_id - $order_id");
            $json['error'] = $this->language->get('text_order_not_found');
        }

        if($mollieOrderDetails['refund_id']) {
            $log->write("Refund has been processed already for order_id - $order_id");
            $json['error'] = $this->language->get('text_refunded_already');
        }

        if ((empty($this->request->post['refund_amount']) || ($this->request->post['refund_amount'] <= 0)) && ($this->request->post['partial_refund_type'] == 'custom_amount')) {
            $json['error'] = $this->language->get('error_refund_amount');
        }

        if (!isset($this->request->post['productline']) && ($this->request->post['partial_refund_type'] == 'productline')) {
            $json['error'] = $this->language->get('error_productline');
        }

        $productline_error = true;
        if (isset($this->request->post['productline'])) {
            foreach ($this->request->post['productline'] as $order_product_id => $line) {
                if (isset($line['selected'])) {
                    $productline_error = false;
                    break;
                }
            }
        }

        if ($productline_error && ($this->request->post['partial_refund_type'] == 'productline')) {
            $json['error'] = $this->language->get('error_productline');
        }

        if(!$json['error']) {
            if ($this->request->post['partial_refund_type'] == 'productline') {
                $lines = array();
                $orderProductIDs = array();
                foreach ($this->request->post['productline'] as $order_product_id => $line) {
                    if (isset($line['selected'])) {
                        $lines[] = array(
                            "id" => (string)$line['orderline_id'],
                            "quantity" => (int)$line['quantity']
                        );

                        $orderProductIDs[] = $order_product_id;
                    }
                }
                if (!empty($lines)) {
                    $mollieOrder = $this->getAPIClient($order['store_id'])->orders->get($mollieOrderDetails['mollie_order_id']);
                    $refundObject = $mollieOrder->refund([
                        "lines" => $lines,
                        "metadata" => array("order_id" => $order_id, "transaction_id" => $mollieOrderDetails['transaction_id'], "mollie_order_id" => $mollieOrderDetails['mollie_order_id'], "order_product_id" => implode(",", $orderProductIDs))
                    ]);
                }
            } elseif($this->request->post['partial_refund_type'] == 'custom_amount') {
                $amount = $this->numberFormat($this->request->post['refund_amount'], $order['currency_code']);
                $molliePayment = $this->getAPIClient($order['store_id'])->payments->get($mollieOrderDetails['transaction_id']);
                $refundObject = $molliePayment->refund([
                    "amount" => ["currency" => $order['currency_code'], "value" => (string)$amount],
                    "metadata" => array("order_id" => $order_id, "transaction_id" => $mollieOrderDetails['transaction_id'])
                ]);
            }

            if($refundObject->id) {
                $amount = $refundObject->amount->value .' '. $refundObject->amount->currency;
                $log->write('Partial refund of amount ' . $amount . ' has been processed for order_id - ' . $order_id . ' and transaction_id - ' . $mollieOrderDetails['transaction_id'] . '. Refund id is ' . $refundObject->id);
                $json['success'] = $this->language->get('text_refund_success');
                $json['order_status_id'] = $this->config->get($moduleCode . "_ideal_partial_refund_status_id");
                $json['comment'] = sprintf($this->language->get('text_partial_refund_success'), $amount);

                $data = array(
                    "refund_id" => $refundObject->id,
                    "order_id" => $order_id,
                    "transaction_id" => $mollieOrderDetails['transaction_id'],
                    "amount" => $refundObject->amount->value,
                    "currency_code" => $refundObject->amount->currency
                );
                $this->model_sale_order->addMollieRefund($data);

            } else {
                $log->write('Partial Refund can not be processed for order_id - ' . $order_id . ' and transaction_id - ' . $mollieOrderDetails['transaction_id']);
                $json['error'] = $this->language->get('text_no_refund');
            }
        }

        $this->response->addHeader('Content-Type: application/json');
        $this->response->setOutput(json_encode($json));

    }
                ]]></add>
        </operation>
        <!-- Shipment creation for Klarna method for versions older than 2.2 -->
        <operation error="skip">
            <search position="before" index="4"><![CDATA[$this->data['success']]]></search>
            <add position="before"><![CDATA[// Shipment creation for Klarna for versions older than 2.2
                if(VERSION <= "1.5.6.4") {
                    $orderdata = array("0" => $this->request->get['order_id'], "1" => $this->request->post['order_status_id']);
                    $route = null;
                    require(DIR_CATALOG . "controller/payment/mollie/base.php");
                    $controller = new ControllerPaymentMollieBase($this->registry);
                    $controller->createShipment($route, $orderdata, "", "");
                } ]]></add>
        </operation>
        <operation error="skip">
            <search position="before"><![CDATA[$this->template = 'sale/order_info.tpl';]]></search>
            <add position="before"><![CDATA[$this->data['payment_status'] = '';
            $this->data['paymentMethod'] = '';
            $molliePaymentDetails = $this->model_sale_order->getMolliePayment($this->request->get['order_id']);
            if(isset($molliePaymentDetails['transaction_id']) && !empty($molliePaymentDetails['transaction_id'])) {
                try {
                    $molliePayment = $this->getAPIClient($order_info['store_id'])->payments->get($molliePaymentDetails['transaction_id']);
                     $this->data['payment_status'] = $molliePayment->status;
                     $this->data['paymentMethod'] = $molliePayment->method;

                     // Check for refunds and settlements
                    if($molliePayment->hasRefunds()) {
                        $this->data['payment_status'] = 'refunded';
                    }
                    if(!empty($molliePayment->settlementId)) {
                        $mollieHelper = new MollieHelper($this->registry);
                        $accessToken = $mollieHelper->generateAccessToken($order_info['store_id']);
                        if($accessToken && !empty($accessToken)) {
                            $mollieSettlement = $mollieHelper->getAPIClientForAccessToken($accessToken)->settlements->get($molliePayment->settlementId);
                            if($mollieSettlement->isPaidout()) {
                                $this->data['payment_status'] = 'settled';
                            }
                        }
                    }
                } catch (Mollie\Api\Exceptions\ApiException $e) {
                    $log = new Log('Mollie.log');
                    $log->write(htmlspecialchars($e->getMessage()));
                }
            }
            
            $this->data['productlines'] = array();
            if ($molliePaymentDetails && !empty($molliePaymentDetails['mollie_order_id'])) {
                try {
                    $mollieOrder = $this->getAPIClient($order_info['store_id'])->orders->get($molliePaymentDetails['mollie_order_id'], ["embed" => "refunds"]);

                    $refundedLines = array();
                    if(!empty($mollieOrder->_embedded->refunds)) {
                        foreach ($mollieOrder->_embedded->refunds as $refund) {
                            foreach ($refund->lines as $refundedLine) {
                                $refundedLines[] = $refundedLine->id;
                            }                        
                        }
                    }

                    if ($mollieOrder->lines) {
                        foreach ($mollieOrder->lines as $orderline) {
                            if ($orderline->type == 'physical') {
                                foreach ($this->data['products'] as $_product) {
                                    if (($orderline->metadata) && ($orderline->metadata->order_product_id == $_product['order_product_id']) && !in_array($orderline->id, $refundedLines)) {
                                        $this->data['productlines'][] = array(
                                            "id" => $orderline->id,
                                            "name" => $_product['name'],
                                            "option" => $_product['option'],
                                            "quantity" => $orderline->quantity,
                                            "order_product_id" => $orderline->metadata->order_product_id
                                        );
                                    }
                                }
                            }
                        }
                    }
                } catch (Mollie\Api\Exceptions\ApiException $e) {
                    $log = new Log('Mollie.log');
                    $log->write(htmlspecialchars($e->getMessage()));
                }
            }
            ]]></add>
        </operation>
        <operation error="skip">
            <search position="after"><![CDATA[$this->data['button_add_history']]]></search>
            <add position="after"><![CDATA[$this->data['button_refund'] = $this->language->get('button_refund');
                $this->data['text_confirm_refund'] = $this->language->get('text_confirm_refund');
                $this->data['entry_amount'] = $this->language->get('entry_amount');
                $this->data['button_partial_refund'] = $this->language->get('button_partial_refund');
                $this->data['entry_partial_refund_type'] = $this->language->get('entry_partial_refund_type');
                $this->data['text_custom_amount'] = $this->language->get('text_custom_amount');
                $this->data['text_productline'] = $this->language->get('text_productline');
                $this->data['entry_productline'] = $this->language->get('entry_productline');
                $this->data['entry_quantity'] = $this->language->get('entry_quantity');
                $this->data['help_quantity'] = $this->language->get('help_quantity');
                ]]></add>
        </operation>
        <operation error="skip">
            <search position="before" index="4"><![CDATA[$this->data['email']]]></search>
            <add position="before"><![CDATA[
            $mollieHelper = new MollieHelper($this->registry);
            $moduleCode = $mollieHelper->getModuleCode();
            $apiKey = $mollieHelper->getApiKey($order_info['store_id']);

            $this->data['showRefundButton'] = true;
            $this->data['showPartialRefundButton'] = true;
            if(!$apiKey || ($apiKey == '')) {
                $this->data['showRefundButton'] = false;
                $this->data['showPartialRefundButton'] = false;
            }

            $refunds = $this->model_sale_order->getMollieRefunds($order_id);
            if ($refunds) {
                $this->data['showRefundButton'] = false;
            }

            if (!$this->config->get($moduleCode . '_partial_refund')) {
                $this->data['showPartialRefundButton'] = false;
            }

            $this->data['currency'] = $order_info['currency_code'];
            $this->data['store_id'] = $order_info['store_id'];
            if (isset($this->request->server['HTTPS']) && (($this->request->server['HTTPS'] == 'on') || ($this->request->server['HTTPS'] == '1'))) {
                $this->data['catalog'] = HTTPS_CATALOG;
            } else {
                $this->data['catalog'] = HTTP_CATALOG;
            }
            ]]></add>
        </operation>
    </file>
    <file path="admin/model/sale/order.php">
        <operation error="skip">
            <search position="before"><![CDATA[public function getOrder($order_id)]]></search>
            <add position="before"><![CDATA[public function getMolliePayment($order_id) {
        $_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "mollie_payments` WHERE order_id = '" . (int)$order_id . "' ORDER BY payment_attempt DESC LIMIT 1");

        if ($_query->num_rows) {
            return $_query->row;
        }

        return null;
    }

    public function updateMolliePayment($mollie_order_id, $refund_id, $payment_status) {
        $this->db->query("UPDATE `" . DB_PREFIX . "mollie_payments` SET refund_id = '" . $refund_id . "', bank_status = '" . $payment_status . "' WHERE mollie_order_id = '" . (int)$mollie_order_id . "'");
    }

    public function updateMolliePaymentForPaymentAPI($mollie_payment_id, $refund_id, $payment_status) {
        $this->db->query("UPDATE `" . DB_PREFIX . "mollie_payments` SET refund_id = '" . $refund_id . "', bank_status = '" . $payment_status . "' WHERE transaction_id = '" . (int)$mollie_payment_id . "'");
    }

    public function getMollieRefunds($order_id) {
        $_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "mollie_refund WHERE order_id = '" . (int)$order_id . "'");

        return $_query->rows;
    }

    public function addMollieRefund($data) {
        $this->db->query("INSERT INTO " . DB_PREFIX . "mollie_refund SET refund_id = '" . $this->db->escape($data['refund_id']) . "', order_id = '" . (int)$data['order_id'] . "', transaction_id = '" . $this->db->escape($data['transaction_id']) . "', amount = '" . (float)$data['amount'] . "', currency_code = '" . $this->db->escape($data['currency_code']) . "', date_created = NOW()");
    }
]]></add>
        </operation>
        <operation error="skip">
            <search position="before"><![CDATA[public function getOrderHistories($order_id, $start = 0, $limit = 10) {]]></search>
            <add position="before"><![CDATA[//Get order reference id for mollie payment
    public function getOrderID($order_id)
    {
        if (!empty($order_id)) {
            $results = $this->db->query("SELECT * FROM `" . DB_PREFIX . "mollie_payments` WHERE `order_id` = '" . $order_id . "' ORDER BY payment_attempt DESC LIMIT 1");
            if($results->num_rows == 0) return FALSE;
            return $results->row['mollie_order_id'];
        }
        return FALSE;
    }]]></add>
        </operation>
    </file>
    <!-- Ignore token check -->
    <file path="admin/controller/startup/login.php">
        <operation error="skip">
            <search position="after"><![CDATA['common/login',]]></search>
            <add position="after"><![CDATA['extension/payment/mollie_bancontact/mollieConnectCallback',
                'payment/mollie_bancontact/mollieConnectCallback',]]></add>
        </operation>
    </file>
    <file path="admin/controller/common/login.php">
        <operation error="skip">
            <search position="after"><![CDATA[$ignore = array(]]></search>
            <add position="after"><![CDATA['extension/payment/mollie_bancontact/mollieConnectCallback',
                'payment/mollie_bancontact/mollieConnectCallback',]]></add>
        </operation>
    </file>
    <file path="admin/controller/common/home.php">
        <operation error="skip">
            <search position="after" index="1" offset="2"><![CDATA[if (isset($part[1])) {]]></search>
            <add position="after"><![CDATA[if (isset($part[2])) {
                $route .= '/' . $part[2];
            }]]></add>
        </operation>
        <operation error="skip">
            <search position="after" index="2"><![CDATA['common/login',]]></search>
            <add position="after"><![CDATA['extension/payment/mollie_bancontact/mollieConnectCallback',
                'payment/mollie_bancontact/mollieConnectCallback',]]></add>
        </operation>
        <operation error="skip">
            <search position="before"><![CDATA[$this->language->load('common/home');]]></search>
            <add position="before"><![CDATA[      $this->load->model('setting/extension');

        $extensions = $this->model_setting_extension->getInstalled('payment');

        $this->data['success'] = '';
        foreach ($extensions as $key => $value) {
            if ($value == 'mollie_ideal') {
                require_once(DIR_SYSTEM . "library/mollie/helper.php");
                require_once(DIR_SYSTEM . "/library/mollie/mollieHttpClient.php");
                $client = new Mollie\mollieHttpClient();
                $info = $client->get("https://api.github.com/repos/mollie/OpenCart/releases/latest");
                $mollieHelper = new MollieHelper($this->registry);
                if (isset($info["tag_name"]) && ($info["tag_name"] != $mollieHelper::PLUGIN_VERSION) && version_compare($mollieHelper::PLUGIN_VERSION, $info["tag_name"], "<")) {
                    $this->language->load('payment/mollie_ideal');
                    $this->data['success'] = sprintf($this->language->get('text_update_message'), $info["tag_name"], HTTPS_SERVER . 'index.php?route=payment/mollie_ideal/update&token=' . $this->session->data['token']);
                }
                break;
            }            
        }
]]></add>
        </operation>
    </file>
    <!-- Load JS file only on checkout -->
    <!-- <file path="catalog/view/theme/*/template/common/header.tpl">
        <operation error="skip">
            <search position="before"><![CDATA[</head>]]></search>
            <add position="before"><![CDATA[<script src="catalog/view/javascript/mollie.js" type="text/javascript"></script>]]></add>
        </operation>
    </file> -->

    <!-- <file path="catalog/view/theme/*/template/common/header.twig">
        <operation error="skip">
            <search position="before"><![CDATA[</head>]]></search>
            <add position="before"><![CDATA[<script src="catalog/view/javascript/mollie.js" type="text/javascript"></script>]]></add>
        </operation>
    </file> -->
    <file path="admin/language/en-gb/sale/order.php">
        <operation error="skip">
            <search position="after"><![CDATA[// Text]]></search>
            <add position="after"><![CDATA[$_['button_refund'] = 'Refund';
                $_['text_order_not_found'] = 'Mollie order details not found!';
                $_['text_no_refund'] = 'Refund cannot be processed!';
                $_['text_refunded_already'] = 'Refund has been processed already!';
                $_['text_refund_success']     = 'Refund has been processed successfully!';
                $_['text_confirm_refund']     = 'You are about to refund this payment, this cannot be undone. Are you sure you would like to continue?';
                $_['entry_amount']     = 'Amount';
                $_['button_partial_refund']     = 'Partial Refund';
                $_['error_refund_amount']       = 'Warning: Please enter a correct amount to refund!';
                $_['text_partial_refund_success']     = 'Partial refund of amount %s has been processed successfully!';
                $_['entry_partial_refund_type']     = 'Refund Type';
                $_['text_custom_amount']     = 'Custom Amount Refund';
                $_['text_productline']       = 'Productline Refund';
                $_['entry_productline']      = 'Productlines';
                $_['entry_quantity']         = 'Quantity';
                $_['help_quantity']          = 'Quantity to refund. Should not exceed the ordered quantity.';
                $_['error_productline']      = 'Warning: Please select a productline to refund!';
                ]]></add>
        </operation>
    </file>
    <file path="admin/language/english/sale/order.php">
        <operation error="skip">
            <search position="after"><![CDATA[// Text]]></search>
            <add position="after"><![CDATA[$_['button_refund'] = 'Refund';
                $_['text_order_not_found'] = 'Mollie order details not found!';
                $_['text_no_refund'] = 'Refund cannot be processed!';
                $_['text_refunded_already'] = 'Refund has been processed already!';
                $_['text_refund_success']     = 'Refund has been processed successfully!';
                $_['text_confirm_refund']     = 'You are about to refund this payment, this cannot be undone. Are you sure you would like to continue?';
                $_['entry_amount']     = 'Amount';
                $_['button_partial_refund']     = 'Partial Refund';
                $_['error_refund_amount']       = 'Warning: Please enter a correct amount to refund!';
                $_['text_partial_refund_success']     = 'Partial refund of amount %s has been processed successfully!';
                $_['entry_partial_refund_type']     = 'Refund Type';
                $_['text_custom_amount']     = 'Custom Amount Refund';
                $_['text_productline']       = 'Productline Refund';
                $_['entry_productline']      = 'Productlines';
                $_['entry_quantity']         = 'Quantity';
                $_['help_quantity']          = 'Quantity to refund. Should not exceed the ordered quantity.';
                $_['error_productline']      = 'Warning: Please select a productline to refund!';
                ]]></add>
        </operation>
    </file>
    <file path="admin/language/de-de/sale/order.php">
        <operation error="skip">
            <search position="after"><![CDATA[// Text]]></search>
            <add position="after"><![CDATA[$_['button_refund'] = 'Rückerstattung';
                $_['text_order_not_found'] = 'Mollie Bestelldetails nicht gefunden!';
                $_['text_no_refund'] = 'Rückerstattung kann nicht bearbeitet werden!';
                $_['text_refunded_already'] = 'Rückerstattung wurde bereits bearbeitet!';
                $_['text_refund_success']     = 'Rückerstattung wurde erfolgreich bearbeitet!';
                $_['text_confirm_refund']     = 'Sie sind dabei, diese Zahlung zu erstatten. Dies kann nicht rückgängig gemacht werden. Sind Sie sicher, dass Sie fortfahren möchten?';
                $_['entry_amount']     = 'Amount';
                $_['button_partial_refund']     = 'Teilerstattung';
                $_['error_refund_amount']       = 'Warnung: Bitte geben Sie einen korrekten Betrag für die Rückerstattung ein!';
                $_['text_partial_refund_success']     = 'eilrückerstattung des Betrags %s wurde erfolgreich bearbeitet!';
                $_['entry_partial_refund_type']     = 'Rückerstattungsart';
                $_['text_custom_amount']     = 'Rückerstattung des benutzerdefinierten Betrags';
                $_['text_productline']       = 'Produktlinien-Erstattung';
                $_['entry_productline']      = 'Produktlinien';
                $_['entry_quantity']         = 'Menge';
                $_['help_quantity']          = 'Zu erstattende Menge. Sollte die bestellte Menge nicht überschreiten.';
                $_['error_productline']      = 'Achtung: Bitte wählen Sie eine Produktlinie für die Rückerstattung aus!';
                ]]></add>
        </operation>
    </file>
    <file path="admin/language/german/sale/order.php">
        <operation error="skip">
            <search position="after"><![CDATA[// Text]]></search>
            <add position="after"><![CDATA[$_['button_refund'] = 'Rückerstattung';
                $_['text_order_not_found'] = 'Mollie Bestelldetails nicht gefunden!';
                $_['text_no_refund'] = 'Rückerstattung kann nicht bearbeitet werden!';
                $_['text_refunded_already'] = 'Rückerstattung wurde bereits bearbeitet!';
                $_['text_refund_success']     = 'Rückerstattung wurde erfolgreich bearbeitet!';
                $_['text_confirm_refund']     = 'Sie sind dabei, diese Zahlung zu erstatten. Dies kann nicht rückgängig gemacht werden. Sind Sie sicher, dass Sie fortfahren möchten?';
                $_['entry_amount']     = 'Amount';
                $_['button_partial_refund']     = 'Teilerstattung';
                $_['error_refund_amount']       = 'Warnung: Bitte geben Sie einen korrekten Betrag für die Rückerstattung ein!';
                $_['text_partial_refund_success']     = 'eilrückerstattung des Betrags %s wurde erfolgreich bearbeitet!';
                $_['entry_partial_refund_type']     = 'Rückerstattungsart';
                $_['text_custom_amount']     = 'Rückerstattung des benutzerdefinierten Betrags';
                $_['text_productline']       = 'Produktlinien-Erstattung';
                $_['entry_productline']      = 'Produktlinien';
                $_['entry_quantity']         = 'Menge';
                $_['help_quantity']          = 'Zu erstattende Menge. Sollte die bestellte Menge nicht überschreiten.';
                $_['error_productline']      = 'Achtung: Bitte wählen Sie eine Produktlinie für die Rückerstattung aus!';
                ]]></add>
        </operation>
    </file>
    <file path="admin/language/nl-nl/sale/order.php">
        <operation error="skip">
            <search position="after"><![CDATA[// Text]]></search>
            <add position="after"><![CDATA[$_['button_refund'] = 'Terugbetaling';
                $_['text_order_not_found'] = 'Mollie bestelgegevens niet gevonden!';
                $_['text_no_refund'] = 'Restitutie kan niet worden verwerkt!';
                $_['text_refunded_already'] = 'Restitutie is al verwerkt!';
                $_['text_refund_success']     = 'Terugbetaling is succesvol verwerkt!';
                $_['text_confirm_refund']     = 'U staat op het punt deze betaling terug te betalen. Dit kan niet ongedaan worden gemaakt. Weet u zeker dat u wilt doorgaan?';
                $_['entry_amount']     = 'Amount';
                $_['button_partial_refund']     = 'Gedeeltelijke terugbetaling';
                $_['error_refund_amount']       = 'Waarschuwing: voer een correct bedrag in om terug te betalen!';
                $_['text_partial_refund_success']     = 'Gedeeltelijke terugbetaling van bedrag %s is succesvol verwerkt!';
                $_['entry_partial_refund_type']     = 'Terugbetalingstype';
                $_['text_custom_amount']     = 'Terugbetaling aangepast bedrag';
                $_['text_productline']       = 'Productlijn Terugbetaling';
                $_['entry_productline']      = 'Productlijnen';
                $_['entry_quantity']         = 'Aantel';
                $_['help_quantity']          = 'Te restitueren aantal. Mag het bestelde aantal niet overschrijden.';
                $_['error_productline']      = 'Waarschuwing: Selecteer een productlijn om terug te betalen!';
                ]]></add>
        </operation>
    </file>
    <file path="admin/language/dutch/sale/order.php">
        <operation error="skip">
            <search position="after"><![CDATA[// Text]]></search>
            <add position="after"><![CDATA[$_['button_refund'] = 'Terugbetaling';
                $_['text_order_not_found'] = 'Mollie bestelgegevens niet gevonden!';
                $_['text_no_refund'] = 'Restitutie kan niet worden verwerkt!';
                $_['text_refunded_already'] = 'Restitutie is al verwerkt!';
                $_['text_refund_success']     = 'Terugbetaling is succesvol verwerkt!';
                $_['text_confirm_refund']     = 'U staat op het punt deze betaling terug te betalen. Dit kan niet ongedaan worden gemaakt. Weet u zeker dat u wilt doorgaan?';
                $_['entry_amount']     = 'Amount';
                $_['button_partial_refund']     = 'Gedeeltelijke terugbetaling';
                $_['error_refund_amount']       = 'Waarschuwing: voer een correct bedrag in om terug te betalen!';
                $_['text_partial_refund_success']     = 'Gedeeltelijke terugbetaling van bedrag %s is succesvol verwerkt!';
                $_['entry_partial_refund_type']     = 'Terugbetalingstype';
                $_['text_custom_amount']     = 'Terugbetaling aangepast bedrag';
                $_['text_productline']       = 'Productlijn Terugbetaling';
                $_['entry_productline']      = 'Productlijnen';
                $_['entry_quantity']         = 'Aantel';
                $_['help_quantity']          = 'Te restitueren aantal. Mag het bestelde aantal niet overschrijden.';
                $_['error_productline']      = 'Waarschuwing: Selecteer een productlijn om terug te betalen!';
                ]]></add>
        </operation>
    </file>
    <file path="admin/language/es-es/sale/order.php">
        <operation error="skip">
            <search position="after"><![CDATA[// Text]]></search>
            <add position="after"><![CDATA[$_['button_refund'] = 'Reembolso';
                $_['text_order_not_found'] = '¡No se han encontrado los detalles del pedido de Mollie!';
                $_['text_no_refund'] = '¡No se puede procesar el reembolso!';
                $_['text_refunded_already'] = '¡El reembolso ya se ha procesado!';
                $_['text_refund_success']     = '¡El reembolso ha sido procesado con éxito!';
                $_['text_confirm_refund']     = 'Está a punto de reembolsar este pago, esto no se puede deshacer. ¿Estás seguro de que te gustaría continuar?';
                $_['entry_amount']     = 'Amount';
                $_['button_partial_refund']     = 'Reembolso parcial';
                $_['error_refund_amount']       = 'Advertencia: ¡Ingrese una cantidad correcta para reembolsar!';
                $_['text_partial_refund_success']     = '¡El reembolso parcial de la cantidad %s se ha procesado correctamente!';
                $_['entry_partial_refund_type']     = 'Tipo de reembolso';
                $_['text_custom_amount']     = 'Reembolso de cantidad personalizada';
                $_['text_productline']       = 'Reembolso de la línea de productos';
                $_['entry_productline']      = 'Líneas de productos';
                $_['entry_quantity']         = 'Cantidad';
                $_['help_quantity']          = 'Cantidad a reembolsar. No debe exceder la cantidad pedida.';
                $_['error_productline']      = 'Advertencia: ¡Seleccione una línea de productos para reembolsar!';
                ]]></add>
        </operation>
    </file>
    <file path="admin/language/spanish/sale/order.php">
        <operation error="skip">
            <search position="after"><![CDATA[// Text]]></search>
            <add position="after"><![CDATA[$_['button_refund'] = 'Reembolso';
                $_['text_order_not_found'] = '¡No se han encontrado los detalles del pedido de Mollie!';
                $_['text_no_refund'] = '¡No se puede procesar el reembolso!';
                $_['text_refunded_already'] = '¡El reembolso ya se ha procesado!';
                $_['text_refund_success']     = '¡El reembolso ha sido procesado con éxito!';
                $_['text_confirm_refund']     = 'Está a punto de reembolsar este pago, esto no se puede deshacer. ¿Estás seguro de que te gustaría continuar?';
                $_['entry_amount']     = 'Amount';
                $_['button_partial_refund']     = 'Reembolso parcial';
                $_['error_refund_amount']       = 'Advertencia: ¡Ingrese una cantidad correcta para reembolsar!';
                $_['text_partial_refund_success']     = '¡El reembolso parcial de la cantidad %s se ha procesado correctamente!';
                $_['entry_partial_refund_type']     = 'Tipo de reembolso';
                $_['text_custom_amount']     = 'Reembolso de cantidad personalizada';
                $_['text_productline']       = 'Reembolso de la línea de productos';
                $_['entry_productline']      = 'Líneas de productos';
                $_['entry_quantity']         = 'Cantidad';
                $_['help_quantity']          = 'Cantidad a reembolsar. No debe exceder la cantidad pedida.';
                $_['error_productline']      = 'Advertencia: ¡Seleccione una línea de productos para reembolsar!';
                ]]></add>
        </operation>
    </file>
    <file path="admin/language/fr-fr/sale/order.php">
        <operation error="skip">
            <search position="after"><![CDATA[// Text]]></search>
            <add position="after"><![CDATA[$_['button_refund'] = 'Rembourser';
                $_['text_order_not_found'] = 'Détails de commande Mollie non trouvés!';
                $_['text_no_refund'] = 'Le remboursement ne peut être traité!';
                $_['text_refunded_already'] = 'Le remboursement a déjà été traité!';
                $_['text_refund_success']     = 'Le remboursement a été traité avec succès!';
                $_['text_confirm_refund']     = 'Vous êtes sur le point de rembourser ce paiement, cela ne peut pas être annulé. Êtes-vous sûr de vouloir continuer?';
                $_['entry_amount']     = 'Amount';
                $_['button_partial_refund']     = 'Remboursement partiel';
                $_['error_refund_amount']       = 'Attention: veuillez entrer un montant correct à rembourser!';
                $_['text_partial_refund_success']     = 'Le remboursement partiel du montant %s a été traité avec succès!';
                $_['entry_partial_refund_type']     = 'Type de remboursement';
                $_['text_custom_amount']     = 'Remboursement du montant personnalisé';
                $_['text_productline']       = 'Remboursement de la gamme de produits';
                $_['entry_productline']      = 'Chaînes de production';
                $_['entry_quantity']         = 'Quantité';
                $_['help_quantity']          = 'Quantité à rembourser. Ne doit pas dépasser la quantité commandée.';
                $_['error_productline']      = 'Attention : Veuillez sélectionner une gamme de produits à rembourser!';
                ]]></add>
        </operation>
    </file>
    <file path="admin/language/french/sale/order.php">
        <operation error="skip">
            <search position="after"><![CDATA[// Text]]></search>
            <add position="after"><![CDATA[$_['button_refund'] = 'Rembourser';
                $_['text_order_not_found'] = 'Détails de commande Mollie non trouvés!';
                $_['text_no_refund'] = 'Le remboursement ne peut être traité!';
                $_['text_refunded_already'] = 'Le remboursement a déjà été traité!';
                $_['text_refund_success']     = 'Le remboursement a été traité avec succès!';
                $_['text_confirm_refund']     = 'Vous êtes sur le point de rembourser ce paiement, cela ne peut pas être annulé. Êtes-vous sûr de vouloir continuer?';
                $_['entry_amount']     = 'Amount';
                $_['button_partial_refund']     = 'Remboursement partiel';
                $_['error_refund_amount']       = 'Attention: veuillez entrer un montant correct à rembourser!';
                $_['text_partial_refund_success']     = 'Le remboursement partiel du montant %s a été traité avec succès!';
                $_['entry_partial_refund_type']     = 'Type de remboursement';
                $_['text_custom_amount']     = 'Remboursement du montant personnalisé';
                $_['text_productline']       = 'Remboursement de la gamme de produits';
                $_['entry_productline']      = 'Chaînes de production';
                $_['entry_quantity']         = 'Quantité';
                $_['help_quantity']          = 'Quantité à rembourser. Ne doit pas dépasser la quantité commandée.';
                $_['error_productline']      = 'Attention : Veuillez sélectionner une gamme de produits à rembourser!';
                ]]></add>
        </operation>
    </file>
    <file path="admin/view/template/sale/order_info.tpl">
        <operation error="skip">
            <search position="replace"><![CDATA[<td><?php echo $payment_method; ?></td>]]></search>
            <add position="replace"><![CDATA[<td><?php echo $payment_method; ?>&nbsp;&nbsp;
                  <?php if($payment_status == 'paid') { ?>
                    <span id="payment-status" class="label label-success"><?php echo strtoupper($payment_status); ?></span>
                  <?php } elseif($payment_status == 'failed') { ?>
                    <span id="payment-status" class="label label-danger"><?php echo strtoupper($payment_status); ?></span>
                  <?php } elseif($payment_status == 'expired') { ?>
                    <span id="payment-status" class="label label-default"><?php echo strtoupper($payment_status); ?></span>
                  <?php } elseif($payment_status == 'open') { ?>
                    <span id="payment-status" class="label label-info"><?php echo strtoupper($payment_status); ?></span>
                  <?php } elseif($payment_status == 'canceled') { ?>
                    <span id="payment-status" class="label label-default"><?php echo strtoupper($payment_status); ?></span>
                  <?php } elseif($payment_status == 'pending') { ?>
                    <span id="payment-status" class="label label-warning"><?php echo strtoupper($payment_status); ?></span>
                  <?php } elseif($payment_status == 'authorized') { ?>
                    <span id="payment-status" class="label label-primary"><?php echo strtoupper($payment_status); ?></span>
                  <?php } elseif($payment_status == 'refunded') { ?>
                    <span id="payment-status" class="label label-primary"><?php echo strtoupper($payment_status); ?></span>
                  <?php } elseif($payment_status == 'settled') { ?>
                    <span id="payment-status" class="label label-success"><?php echo strtoupper($payment_status); ?></span>
                  <?php } ?>
                  <?php if(($payment_status) && !in_array($payment_status, ['expired', 'refunded', 'failed', 'canceled', 'open']) && !in_array($paymentMethod, ['paysafecard', 'giftcard']) && $showRefundButton) { ?>
                  <a href="#" onclick="event.preventDefault()" id="button-refund" class="label label-primary"><?php echo $button_refund; ?></a>
                  <?php } ?>
                  <?php if(isset($isVersion15x)) { ?>
                    <?php if(($payment_status) && !in_array($payment_status, ['expired', 'failed', 'canceled', 'open']) && !in_array($paymentMethod, ['paysafecard', 'giftcard']) && $showPartialRefundButton) { ?>
                        <a href="#" onclick="event.preventDefault()" id="button-partial-refund-model" class="label label-primary"><?php echo $button_partial_refund; ?></a>
                    <?php } ?>
                  <?php } else { ?>
                      <?php if(($payment_status) && !in_array($payment_status, ['expired', 'failed', 'canceled', 'open']) && !in_array($paymentMethod, ['paysafecard', 'giftcard']) && $showPartialRefundButton) { ?>
                      <a href="#" onclick="event.preventDefault()" data-toggle="modal" data-target="#refundModal" class="label label-warning"><?php echo $button_partial_refund; ?></a>
                      <?php } ?>
                  <?php } ?>
                </td>]]></add>
        </operation>
        <operation error="skip">
            <search position="before"><![CDATA[<?php echo $footer; ?>]]></search>
            <add position="before"><![CDATA[
<?php if(!isset($isVersion15x)) { ?>
<!-- Refund Modal -->
<div class="modal fade" id="refundModal" tabindex="-1" role="dialog" aria-labelledby="refundModalTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title"><?php echo $button_partial_refund; ?></h4>
      </div>
      <div class="modal-body form-horizontal">
            <div class="form-group">
                <label class="col-sm-3 control-label"><?php echo $entry_partial_refund_type; ?></label>
                <div class="col-sm-9">
                    <select name="partial_refund_type" class="form-control" <?php if (empty($productlines)) { ?>disabled="disabled"<?php } ?>>
                        <option value="custom_amount"><?php echo $text_custom_amount; ?></option>
                        <option value="productline"><?php echo $text_productline; ?></option>
                    </select>
                </div>
            </div>
          <div class="form-group" id="amount-box">
            <label class="col-sm-3 control-label"><?php echo $entry_amount . " ($currency)"; ?></label>
            <div class="col-sm-9">
                <input type="text" name="refund_amount" value="" placeholder="<?php echo $entry_amount; ?>" id="refund-amount" class="form-control" />
            </div>
          </div>
          <div class="form-group" id="productline-box">
            <label class="col-sm-3 control-label"><?php echo $entry_productline; ?></label>
            <div class="col-sm-9">
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <td></td>
                            <td><?php echo $column_product; ?></td>
                            <td><span data-toggle="tooltip" title="<?php echo $help_quantity; ?>"><?php echo $column_quantity; ?></span></td>
                        </tr>
                    </thead>
                    <tbody>
                    <?php foreach ($productlines as $productline) { ?>
                    <tr>
                        <td class="text-center"><input type="checkbox" name="productline[<?php echo $productline['order_product_id']; ?>][selected]" value="1" /><input type="hidden" name="productline[<?php echo $productline['order_product_id']; ?>][orderline_id]" value="<?php echo $productline['id']; ?>" /></td>
                        <td class="text-left"><?php echo $productline['name']; ?>
                        <?php foreach ($productline['option'] as $option) { ?>
                            <br/>
                            <?php if ($option['type'] != 'file') { ?>
                            &nbsp;
                            <small> - <?php echo $option['name']; ?>: <?php echo $option['value']; ?></small> <?php } else { ?>
                            &nbsp;
                            <small> - <?php echo $option['name']; ?>: <a href="<?php echo $option['href']; ?>"><?php echo $option['value']; ?></a></small> <?php } ?>
                        <?php } ?></td>
                        <td class="text-left">
                            <input type="text" name="productline[<?php echo $productline['order_product_id']; ?>][quantity]" value="<?php echo $productline['quantity']; ?>" id="refund-quantity" class="form-control" />
                        </td>
                    </tr>
                    <?php } ?>
                    <tbody>
                </table>
            </div>
          </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal"><?php echo $button_cancel; ?></button>
        <button type="button" id="button-partial-refund" class="btn btn-primary"><?php echo $button_refund; ?></button>
      </div>
    </div>
  </div>
</div>
<?php } else { ?>
<!-- Refund Modal -->
<div class="modal" id="refundModal">
    <div class="modal-content">
        <div class="modal-header">
        <span class="close">&times;</span>
        <h4 class="modal-title"><?php echo $button_partial_refund; ?></h4>
        </div>
        <div class="modal-body">
            <table class="form">
                <tr>
                    <td><?php echo $entry_partial_refund_type; ?></td>
                    <td><select name="partial_refund_type" class="form-control" <?php if (empty($productlines)) { ?>disabled="disabled"<?php } ?>>
                        <option value="custom_amount"><?php echo $text_custom_amount; ?></option>
                        <option value="productline"><?php echo $text_productline; ?></option>
                    </select></td>
                </tr>
                <tr id="amount-box">
                    <td><?php echo $entry_amount . " ($currency)"; ?></td>
                    <td><input type="text" name="refund_amount" value="" placeholder="<?php echo $entry_amount; ?>" id="refund-amount" class="form-control" /></td>
                </tr>
                <tr id="productline-box">
                    <td><?php echo $entry_productline; ?></td>
                    <td>
                        <table class="list">
                            <thead>
                                <tr>
                                    <td></td>
                                    <td><?php echo $column_product; ?></td>
                                    <td><span data-toggle="tooltip" title="<?php echo $help_quantity; ?>"><?php echo $column_quantity; ?></span></td>
                                </tr>
                            </thead>
                            <tbody>
                            <?php foreach ($productlines as $productline) { ?>
                            <tr>
                                <td class="text-center"><input type="checkbox" name="productline[<?php echo $productline['order_product_id']; ?>][selected]" value="1" /><input type="hidden" name="productline[<?php echo $productline['order_product_id']; ?>][orderline_id]" value="<?php echo $productline['id']; ?>" /></td>
                                <td class="text-left"><?php echo $productline['name']; ?>
                                <?php foreach ($productline['option'] as $option) { ?>
                                    <br/>
                                    <?php if ($option['type'] != 'file') { ?>
                                    &nbsp;
                                    <small> - <?php echo $option['name']; ?>: <?php echo $option['value']; ?></small> <?php } else { ?>
                                    &nbsp;
                                    <small> - <?php echo $option['name']; ?>: <a href="<?php echo $option['href']; ?>"><?php echo $option['value']; ?></a></small> <?php } ?>
                                <?php } ?></td>
                                <td class="text-left">
                                    <input type="text" name="productline[<?php echo $productline['order_product_id']; ?>][quantity]" value="<?php echo $productline['quantity']; ?>" id="refund-quantity" class="form-control" />
                                </td>
                            </tr>
                            <?php } ?>
                            <tbody>
                        </table>
                    </td>
                </tr>
            </table>
        </div>
        <div class="modal-footer">
            <button type="button" class="button close-model"><?php echo $button_cancel; ?></button>
            <button type="button" id="button-partial-refund" class="button"><?php echo $button_refund; ?></button>
        </div>
    </div>
</div>

<style type="text/css">
.modal {
  display: none;
  position: fixed;
  z-index: 1;
  padding-top: 100px;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgb(0,0,0);
  background-color: rgba(0,0,0,0.4);
}
.modal-content {
  position: relative;
  background-color: #fefefe;
  margin: auto;
  padding: 0;
  width: 50%;
  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
  -webkit-animation-name: animatetop;
  -webkit-animation-duration: 0.4s;
  animation-name: animatetop;
  animation-duration: 0.4s
}
@-webkit-keyframes animatetop {
  from {top:-300px; opacity:0} 
  to {top:0; opacity:1}
}
@keyframes animatetop {
  from {top:-300px; opacity:0}
  to {top:0; opacity:1}
}
.close {
  color: white;
  float: right;
  font-size: 28px;
  font-weight: bold;
}
.close:hover,
.close:focus {
  color: #000;
  text-decoration: none;
  cursor: pointer;
}
.modal-header {
  padding: 2px 16px;
  background-color: #2f2f2f;
  color: white;
}
.modal-body {padding: 2px 16px;}
.modal-footer {
  padding: 0 10px 10px 0;
  background-color: #fff;
  color: white;
  text-align: right;
}
</style>

<script type="text/javascript">
$('#button-partial-refund-model').live('click', function() {
    $('#refundModal').css('display', 'block');
});
$('.close, .close-model').live('click', function() {
    $('.modal').css('display', 'none');
});

window.onclick = function(event) {
    if (event.target.classList.contains("modal")) {
        if (event.target.style.display == 'block') {
            event.target.style.display = "none";
        }	
    }					  
}
</script>
<?php } ?>

<script type="text/javascript"><!--
<?php if(isset($isVersion15x)) { ?>
$('#button-refund').live('click', function() {
if (!confirm('<?php echo $text_confirm_refund; ?>')) {
    return false;
}

$('.warning, .success').remove();
  $.ajax({
    url: 'index.php?route=sale/order/refund&token=<?php echo $token; ?>&order_id=<?php echo $order_id; ?>',
    type: 'post',
    dataType: 'json',
    beforeSend: function() {
        $('#button-refund').after('<img src="view/image/loading.gif" class="loading" style="padding-left: 5px;" />');          
    },
    complete: function() {
        $('.loading').remove();
    },
    success: function(json) {
        $('.success, .warning').remove();
        if (json['error']) {
            $('.box').before('<div class="warning" style="display: none;">' + json['error'] + '</div>');
            $('.warning').fadeIn('slow');
        }
        
        if (json['success']) {
        $.ajax({
            url: 'index.php?route=sale/order/history&token=<?php echo $token; ?>&order_id=<?php echo $order_id; ?>',
            type: 'post',
            dataType: 'html',
            data: 'order_status_id=' + encodeURIComponent(json['order_status_id']) + '&notify=1&override=0&append=1&comment=' + encodeURIComponent(json['comment']),
            success: function(html) {
                $('#history').html(html);
            }
        });
          $('#payment-status').removeClass().addClass("label label-primary").html('REFUNDED');
          $('#button-refund').remove();
            $('.box').before('<div class="success" style="display: none;">' + json['success'] + '</div>');
            $('.success').fadeIn('slow');
        }
    },
    error: function(xhr, ajaxOptions, thrownError) {
      alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
    }
  });
});

$('#refundModal select[name=\'partial_refund_type\']').bind('change', function() {
    if ($(this).val() == 'custom_amount') {
        $('#amount-box').show();
        $('#productline-box').hide();
    }

    if ($(this).val() == 'productline') {
        $('#amount-box').hide();
        $('#productline-box').show();
    }
});
$('#refundModal select[name=\'partial_refund_type\']').trigger('change');

$('#button-partial-refund').live('click', function() {
$('.warning, .success').remove();
  $.ajax({
    url: 'index.php?route=sale/order/partialRefund&token=<?php echo $token; ?>&order_id=<?php echo $order_id; ?>',
    type: 'post',
    data: $('#refundModal input[type=\'text\'], #refundModal input[type=\'hidden\'], #refundModal select, #refundModal input[type=\'checkbox\']:checked'),
    dataType: 'json',
    beforeSend: function() {
        $('#button-partial-refund').after('<img src="view/image/loading.gif" class="loading" style="padding-left: 5px;" />');          
    },
    complete: function() {
        $('.loading').remove();
    },
    success: function(json) {
        $('.success, .warning').remove();
        if (json['error']) {
            $('#refundModal table.form').before('<div class="warning" style="display: none;">' + json['error'] + '</div>');
            $('.warning').fadeIn('slow');
        }
        
        if (json['success']) {
        $.ajax({
            url: 'index.php?route=sale/order/history&token=<?php echo $token; ?>&order_id=<?php echo $order_id; ?>',
            type: 'post',
            dataType: 'html',
            data: 'order_status_id=' + encodeURIComponent(json['order_status_id']) + '&notify=1&override=0&append=1&comment=' + encodeURIComponent(json['comment']),
            success: function(html) {
                $('#history').html(html);
            }
        });
            $('#refundModal table.form').before('<div class="success" style="display: none;">' + json['success'] + '</div>');
            $('.success').fadeIn('slow');
        }
    },
    error: function(xhr, ajaxOptions, thrownError) {
      alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
    }
  });
});
<?php } else { ?>
$('#button-refund').on('click', function() {
if (!confirm('<?php echo $text_confirm_refund; ?>')) {
    return false;
}

$('.alert').remove();
  $.ajax({
    url: 'index.php?route=sale/order/refund&token=<?php echo $token; ?>&order_id=<?php echo $order_id; ?>',
    type: 'post',
    dataType: 'json',
    beforeSend: function() {
      $('#button-refund').button('loading');
    },
    complete: function() {
      $('#button-refund').button('reset');
    },
    success: function(json) {
      if (json['error']) {
        $('#content > .container-fluid').prepend('<div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i> ' + json['error'] + '</div>');
      }

      if(typeof token !== 'undefined') {
        var order_history_url = '<?php echo isset($store_url) ? $store_url : $catalog; ?>index.php?route=api/order/history&token=' + token + '&store_id=<?php echo $store_id; ?>&order_id=<?php echo $order_id; ?>';
      } else {
        var order_history_url = 'index.php?route=sale/order/api&token=<?php echo $token; ?>&api=api/order/history&order_id=<?php echo $order_id; ?>';
      }

      if (json['success']) {
      $.ajax({
        url: order_history_url,
        type: 'post',
        dataType: 'json',
        data: 'order_status_id=' + encodeURIComponent(json['order_status_id']) + '&notify=1&override=0&append=1&comment=' + encodeURIComponent(json['comment']),
        success: function(json) {
          if (json['success']) {
            $('#history').load('index.php?route=sale/order/history&token=<?php echo $token; ?>&order_id=<?php echo $order_id; ?>');
          }
        },
        error: function(xhr, ajaxOptions, thrownError) {
          alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
        }
      });
      $('#payment-status').removeClass().addClass("label label-primary").html('REFUNDED');
      $('#button-refund').remove();
        $('#content > .container-fluid').prepend('<div class="alert alert-success"><i class="fa fa-check-circle"></i> ' + json['success'] + '</div>');
      }
    },
    error: function(xhr, ajaxOptions, thrownError) {
      alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
    }
  });
});

$('#refundModal select[name=\'partial_refund_type\']').on('change', function() {
    if ($(this).val() == 'custom_amount') {
        $('#amount-box').show();
        $('#productline-box').hide();
    }

    if ($(this).val() == 'productline') {
        $('#amount-box').hide();
        $('#productline-box').show();
    }
});
$('#refundModal select[name=\'partial_refund_type\']').trigger('change');

$('#button-partial-refund').on('click', function() {
$('.alert').remove();
  $.ajax({
    url: 'index.php?route=sale/order/partialRefund&token=<?php echo $token; ?>&order_id=<?php echo $order_id; ?>',
    type: 'post',
    data: $('#refundModal input[type=\'text\'], #refundModal input[type=\'hidden\'], #refundModal select, #refundModal input[type=\'checkbox\']:checked'),
    dataType: 'json',
    beforeSend: function() {
      $('#button-partial-refund').button('loading');
    },
    complete: function() {
      $('#button-partial-refund').button('reset');
    },
    success: function(json) {
      if (json['error']) {
        $('#refundModal .modal-body > .form-group:first-child').prepend('<div class="alert alert-danger" style="margin-left: 15px;margin-right: 15px;"><i class="fa fa-exclamation-circle"></i> ' + json['error'] + '</div>');
      }

      if(typeof token !== 'undefined') {
        var order_history_url = '<?php echo isset($store_url) ? $store_url : $catalog; ?>index.php?route=api/order/history&token=' + token + '&store_id=<?php echo $store_id; ?>&order_id=<?php echo $order_id; ?>';
      } else {
        var order_history_url = 'index.php?route=sale/order/api&token=<?php echo $token; ?>&api=api/order/history&order_id=<?php echo $order_id; ?>';
      }

      if (json['success']) {
      $.ajax({
        url: order_history_url,
        type: 'post',
        dataType: 'json',
        data: 'order_status_id=' + encodeURIComponent(json['order_status_id']) + '&notify=1&override=0&append=1&comment=' + encodeURIComponent(json['comment']),
        success: function(json) {
          if (json['success']) {
            $('#history').load('index.php?route=sale/order/history&token=<?php echo $token; ?>&order_id=<?php echo $order_id; ?>');
          }
        },
        error: function(xhr, ajaxOptions, thrownError) {
          alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
        }
      });
        $('#refundModal .modal-body > .form-group:first-child').prepend('<div class="alert alert-success" style="margin-left: 15px;margin-right: 15px;"><i class="fa fa-check-circle"></i> ' + json['success'] + '</div>');
      }
    },
    error: function(xhr, ajaxOptions, thrownError) {
      alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
    }
  });
});
<?php } ?>
//--></script>
]]></add>
        </operation>
    </file>
    <file path="admin/view/template/sale/order_info.twig">
        <operation error="skip">
            <search position="replace"><![CDATA[<td>{{ payment_method }}</td>]]></search>
            <add position="replace"><![CDATA[<td>{{ payment_method }}&nbsp;&nbsp;
                  {% if(payment_status == 'paid') %}
                    <span id="payment-status" class="label label-success">{{ payment_status | upper }}</span>
                  {% elseif(payment_status == 'failed') %}
                    <span id="payment-status" class="label label-danger">{{ payment_status | upper }}</span>
                  {% elseif(payment_status == 'expired') %}
                    <span id="payment-status" class="label label-default">{{ payment_status | upper }}</span>
                  {% elseif(payment_status == 'open') %}
                    <span id="payment-status" class="label label-info">{{ payment_status | upper }}</span>
                  {% elseif(payment_status == 'canceled') %}
                    <span id="payment-status" class="label label-default">{{ payment_status | upper }}</span>
                  {% elseif(payment_status == 'pending') %}
                    <span id="payment-status" class="label label-warning">{{ payment_status | upper }}</span>
                  {% elseif(payment_status == 'authorized') %}
                    <span id="payment-status" class="label label-primary">{{ payment_status | upper }}</span>
                  {% elseif(payment_status == 'refunded') %}
                    <span id="payment-status" class="label label-primary">{{ payment_status | upper }}</span>
                  {% elseif(payment_status == 'settled') %}
                    <span id="payment-status" class="label label-success">{{ payment_status | upper }}</span>
                  {% endif %}
                  {% if((payment_status) and (payment_status not in ['expired', 'refunded', 'failed', 'canceled', 'open']) and (paymentMethod not in ['paysafecard', 'giftcard']) and showRefundButton) %}
                  <a href="#" onclick="event.preventDefault()" id="button-refund" class="label label-primary">{{ button_refund }}</a>
                  {% endif %}
                  {% if((payment_status) and (payment_status not in ['expired', 'failed', 'canceled', 'open']) and (paymentMethod not in ['paysafecard', 'giftcard']) and showPartialRefundButton) %}
                  <a href="#" onclick="event.preventDefault()" data-toggle="modal" data-target="#refundModal" class="label label-warning">{{ button_partial_refund }}</a>
                  {% endif %}
                </td>]]></add>
        </operation>
        <operation error="skip">
            <search position="before"><![CDATA[{{ footer }}]]></search>
            <add position="before"><![CDATA[
<!-- Refund Modal -->
<div class="modal fade" id="refundModal" tabindex="-1" role="dialog" aria-labelledby="refundModalTitle" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">{{ button_partial_refund }}</h4>
      </div>
      <div class="modal-body form-horizontal">
            <div class="form-group">
                <label class="col-sm-3 control-label">{{ entry_partial_refund_type }}</label>
                <div class="col-sm-9">
                    <select name="partial_refund_type" class="form-control" {% if productlines is empty %}disabled="disabled"{% endif %}>
                        <option value="custom_amount">{{ text_custom_amount }}</option>
                        <option value="productline">{{ text_productline }}</option>
                    </select>
                </div>
            </div>
          <div class="form-group" id="amount-box">
            <label class="col-sm-3 control-label">{{ entry_amount ~ " (" ~ currency ~ ")" }}</label>
            <div class="col-sm-9">
                <input type="text" name="refund_amount" value="" placeholder="{{ entry_amount }}" id="refund-amount" class="form-control" />
            </div>
          </div>
          <div class="form-group" id="productline-box">
            <label class="col-sm-3 control-label">{{ entry_productline }}</label>
            <div class="col-sm-9">
                <table class="table table-bordered table-hover">
                    <thead>
                        <tr>
                            <td></td>
                            <td>{{ column_product }}</td>
                            <td><span data-toggle="tooltip" title="{{ help_quantity }}">{{ column_quantity }}</span></td>
                        </tr>
                    </thead>
                    <tbody>
                    {% for productline in productlines %}
                    <tr>
                        <td class="text-center"><input type="checkbox" name="productline[{{ productline['order_product_id'] }}][selected]" value="1" /><input type="hidden" name="productline[{{ productline['order_product_id'] }}][orderline_id]" value="{{ productline['id'] }}" /></td>
                        <td class="text-left">{{ productline['name'] }}{% for option in productline.option %}
                            <br/>
                            {% if option.type != 'file' %}
                            &nbsp;
                            <small> - {{ option.name }}: {{ option.value }}</small> {% else %}
                            &nbsp;
                            <small> - {{ option.name }}: <a href="{{ option.href }}">{{ option.value }}</a></small> {% endif %}
                        {% endfor %}</td>
                        <td class="text-left">
                            <input type="text" name="productline[{{ productline['order_product_id'] }}][quantity]" value="{{ productline['quantity'] }}" id="refund-quantity" class="form-control" />
                        </td>
                    </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
          </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">{{ button_cancel }}</button>
        <button type="button" id="button-partial-refund" class="btn btn-primary">{{ button_refund }}</button>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript"><!--
$('#button-refund').on('click', function() {
if (!confirm('{{ text_confirm_refund }}')) {
    return false;
}

  $('.alert').remove();
  $.ajax({
    url: 'index.php?route=sale/order/refund&user_token={{ user_token }}&order_id={{ order_id }}',
    type: 'post',
    dataType: 'json',
    beforeSend: function() {
      $('#button-refund').button('loading');
    },
    complete: function() {
      $('#button-refund').button('reset');
    },
    success: function(json) {
      if (json['error']) {
        $('#content > .container-fluid').prepend('<div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i> ' + json['error'] + '</div>');
      }

      if (json['success']) {
    $.ajax({
        url: '{{ catalog }}index.php?route=api/order/history&api_token={{ api_token }}&store_id={{ store_id }}&order_id={{ order_id }}',
        type: 'post',
        dataType: 'json',
        data: 'order_status_id=' + encodeURIComponent(json['order_status_id']) + '&notify=1&override=0&append=1&comment=' + encodeURIComponent(json['comment']),
        success: function(json) {
            if (json['success']) {
                $('#history').load('index.php?route=sale/order/history&user_token={{ user_token }}&order_id={{ order_id }}');
            }
        },
        error: function(xhr, ajaxOptions, thrownError) {
            alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
        }
    });
      $('#payment-status').removeClass().addClass("label label-primary").html('REFUNDED');
      $('#button-refund').remove();
      $('#content > .container-fluid').prepend('<div class="alert alert-success"><i class="fa fa-check-circle"></i> ' + json['success'] + '</div>');
      }
    },
    error: function(xhr, ajaxOptions, thrownError) {
      alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
    }
  });
});

$('#refundModal select[name=\'partial_refund_type\']').on('change', function() {
    if ($(this).val() == 'custom_amount') {
        $('#amount-box').show();
        $('#productline-box').hide();
    }

    if ($(this).val() == 'productline') {
        $('#amount-box').hide();
        $('#productline-box').show();
    }
});
$('#refundModal select[name=\'partial_refund_type\']').trigger('change');

$('#button-partial-refund').on('click', function() {
  $('.alert').remove();
  $.ajax({
    url: 'index.php?route=sale/order/partialRefund&user_token={{ user_token }}&order_id={{ order_id }}',
    type: 'post',
    data: $('#refundModal input[type=\'text\'], #refundModal input[type=\'hidden\'], #refundModal select, #refundModal input[type=\'checkbox\']:checked'),
    dataType: 'json',
    beforeSend: function() {
      $('#button-partial-refund').button('loading');
    },
    complete: function() {
      $('#button-partial-refund').button('reset');
    },
    success: function(json) {
      if (json['error']) {
        $('#refundModal .modal-body > .form-group:first-child').prepend('<div class="alert alert-danger" style="margin-left: 15px;margin-right: 15px;"><i class="fa fa-exclamation-circle"></i> ' + json['error'] + '</div>');
      }

    if (json['success']) {
    $.ajax({
        url: '{{ catalog }}index.php?route=api/order/history&api_token={{ api_token }}&store_id={{ store_id }}&order_id={{ order_id }}',
        type: 'post',
        dataType: 'json',
        data: 'order_status_id=' + encodeURIComponent(json['order_status_id']) + '&notify=1&override=0&append=1&comment=' + encodeURIComponent(json['comment']),
        success: function(json) {
            if (json['success']) {
                $('#history').load('index.php?route=sale/order/history&user_token={{ user_token }}&order_id={{ order_id }}');
            }
        },
        error: function(xhr, ajaxOptions, thrownError) {
            alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
        }
    });
      $('#refundModal .modal-body > .form-group:first-child').prepend('<div class="alert alert-success" style="margin-left: 15px;margin-right: 15px;"><i class="fa fa-check-circle"></i> ' + json['success'] + '</div>');
      }
    },
    error: function(xhr, ajaxOptions, thrownError) {
      alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
    }
  });
});
//--></script>
]]></add>
        </operation>
    </file>
    <file path="admin/view/template/common/dashboard.twig">
        <operation error="skip">
            <search position="replace"><![CDATA[<div class="container-fluid">{% if error_install %}]]></search>
            <add position="replace"><![CDATA[<div class="container-fluid">{% if success %}
    <div class="alert alert-success alert-dismissible"><i class="fa fa-check-circle"></i> {{ success }}
        <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
    {% endif %}{% if error_install %}]]></add>
        </operation>
    </file>
    <file path="admin/view/template/common/dashboard.tpl">
        <operation error="skip">
            <search position="before"><![CDATA[<?php if ($error_install) { ?>]]></search>
            <add position="before"><![CDATA[<?php if ($success) { ?>
    <div class="alert alert-success"><i class="fa fa-check-circle"></i> <?php echo $success; ?>
      <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
    <?php } ?>]]></add>
        </operation>
    </file>
    <file path="admin/view/template/common/home.tpl">
        <operation error="skip">
            <search position="after"><![CDATA[<?php echo $header; ?>]]></search>
            <add position="after"><![CDATA[    <?php if ($success) { ?>
    <div class="success"><?php echo $success; ?></div>
    <?php } ?>]]></add>
        </operation>
    </file>
    <file path="admin/controller/common/dashboard.php">
        <operation error="skip">
            <search position="before"><![CDATA[$this->load->language('common/dashboard');]]></search>
            <add position="before"><![CDATA[      if(version_compare(VERSION, '3.0', '<')) {
            $this->load->model('extension/extension');

            $extensions = $this->model_extension_extension->getInstalled('payment');
        } else {
            $this->load->model('setting/extension');

            $extensions = $this->model_setting_extension->getInstalled('payment');

        }

        $data['success'] = '';
        foreach ($extensions as $key => $value) {
            if ($value == 'mollie_ideal') {
                require_once(DIR_SYSTEM . "library/mollie/helper.php");
                require_once(DIR_SYSTEM . "/library/mollie/mollieHttpClient.php");
                $client = new Mollie\mollieHttpClient();
                $info = $client->get("https://api.github.com/repos/mollie/OpenCart/releases/latest");
                $mollieHelper = new MollieHelper($this->registry);
                if (isset($info["tag_name"]) && ($info["tag_name"] != $mollieHelper::PLUGIN_VERSION) && version_compare($mollieHelper::PLUGIN_VERSION, $info["tag_name"], "<")) {
                    $this->load->language('payment/mollie_ideal');

                    if(version_compare(VERSION, '3.0', '<')) {
                        $token = 'token=' . $this->session->data['token'];
                    } else {
                        $token = 'user_token=' . $this->session->data['user_token'];
                    }

                    $data['success'] = sprintf($this->language->get('text_update_message'), $info["tag_name"], $this->url->link("payment/mollie_ideal/update", $token));
                }
                break;
            }
        }
]]></add>
        </operation>
    </file>
    <!-- Mollie components -->
    <file path="catalog/controller/*/checkout.php">
        <operation error="skip">
            <search position="after"><![CDATA[public function index() {]]></search>
            <add position="after"><![CDATA[
                $this->document->addScript('catalog/view/javascript/mollie.js');
                $this->document->addScript('https://js.mollie.com/v1/mollie.js');
                ]]></add>
        </operation>
    </file>
    <file path="catalog/controller/*/*/checkout.php">
        <operation error="skip">
            <search position="after"><![CDATA[public function index() {]]></search>
            <add position="after"><![CDATA[
                $this->document->addScript('catalog/view/javascript/mollie.js');
                $this->document->addScript('https://js.mollie.com/v1/mollie.js');
                ]]></add>
        </operation>
    </file>
    <!--*******************-->
    <!-- PDP Invoice Pro Fix -->
    <file path="catalog/controller/checkout/confirm.php">
        <operation error="skip">
            <search position="after" offset="1"><![CDATA[$order_data['payment_method'] = '';]]></search>
            <add position="after"><![CDATA[
                if (($order_data['payment_method'] == 'text_title') && (substr($this->session->data['payment_method']['code'], 0, 6) == 'mollie')) {
                    $title = $this->session->data['payment_method']['title'];
                    $order_data['payment_method'] = $title;
                }
                ]]></add>
        </operation>
    </file>
    <!--*****************-->
    <file path="system/library/cart/cart.php">
        <operation error="skip">
            <search position="after"><![CDATA[$recurring = array(]]></search>
            <add position="after"><![CDATA[
                'quantity'        => $cart['quantity'],
                'product_id'      => $product_query->row['product_id'],
                ]]></add>
        </operation>
    </file>
    <file path="system/library/cart.php">
        <operation error="skip">
            <search position="after"><![CDATA[$recurring = array(]]></search>
            <add position="after"><![CDATA[
                'quantity'        => $cart['quantity'],
                'product_id'      => $product_query->row['product_id'],
                ]]></add>
        </operation>
    </file>
    <!-- Twig modification fix -->
    <file path="system/library/template/twig.php" error="skip">
        <operation error="skip">
            <search position="replace"><![CDATA[$file = DIR_TEMPLATE . $filename . '.twig';]]></search>
            <add position="replace">
                <![CDATA[$file = modification(DIR_TEMPLATE . $filename . '.twig');]]>
            </add>
        </operation>
    </file>
    <!-- ******** -->
    <file path="admin/controller/extension/extension/payment.php">
        <operation error="skip">
            <search position="before"><![CDATA[$data['extensions'][] = array(]]></search>
            <add position="before">
                <![CDATA[
                if (version_compare(VERSION, '3.0.0.0', '<') && is_file(DIR_APPLICATION . 'controller/payment/' . $extension . '.php') && (strpos($file, 'extension/payment') === false)) {
                    continue;
                }
                ]]>
            </add>
        </operation>
    </file>
    <file path="catalog/controller/account/login.php">
        <operation error="skip">
            <search position="after"><![CDATA[if (!empty($this->request->get['token'])) {]]></search>
            <add position="after">
                <![CDATA[
                $this->session->data['admin_login'] = true; 
                ]]>
            </add>
        </operation>
    </file>
</modification>
